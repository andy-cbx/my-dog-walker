import { useGSAP } from '@gsap/react';import gsap from 'gsap';import React, { useRef } from 'react';import { cn } from '@/utils/cn';gsap.registerPlugin(useGSAP);type ButtonProps = {	label?: string;	children?: React.ReactNode;	colour?: 'primary' | 'secondary';	className?: string;};export const NavButton = ({	className,	label,	colour = 'primary',	children,}: ButtonProps) => {	const btnRef = useRef<HTMLButtonElement>(null);	const tl = useRef<GSAPTimeline>();	const { contextSafe } = useGSAP();	useGSAP(() => {		tl.current = gsap			.timeline({				paused: true,			})			.to(btnRef.current, {				x: -3,				y: -3,				duration: 0.2,			});	});	const onHover = contextSafe((hover: boolean) => {		if (hover) {			tl.current?.play();		} else {			tl.current?.reverse();		}	});	return (		<div			id={'nav-btn-bg'}			className={'rounded-[25px] bg-primary-red pb-px pr-px'}		>			<button				id={'nav-btn'}				ref={btnRef}				className={cn(					'w-60 h-16 rounded-[25px]',					colour === 'primary' ? 'bg-primary-yellow' : '',					colour === 'secondary' ? 'bg-primary-red' : '',					'font-primary text-3xl text-primary-red',					className,				)}				style={{					filter: 'drop-shadow(2px 2px 0px var(--primary-red))',				}}				onMouseEnter={() => onHover(true)}				onMouseLeave={() => onHover(false)}			>				{label ? <p className={''}>{label}</p> : children}			</button>		</div>	);};