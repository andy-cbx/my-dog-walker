import { QueryClient, useQueryClient } from '@tanstack/react-query';import { useMemo } from 'react';import { createBrowserRouter } from 'react-router';import { RouterProvider } from 'react-router/dom';import { paths } from '@/config/paths';import {	default as AppRoot,	ErrorBoundary as AppRootErrorBoundary,} from './root';const convert = (queryClient: QueryClient) => (m: any) => {	const { clientLoader, clientAction, default: Component, ...rest } = m;	return {		...rest,		loader: clientLoader?.(queryClient),		action: clientAction?.(queryClient),		Component,	};};export const createAppRouter = (queryClient: QueryClient) =>	createBrowserRouter([		{			path: paths.home.path,			element: <AppRoot />,			ErrorBoundary: AppRootErrorBoundary,			children: [				{					path: paths.root.path,					lazy: () =>						import('@/routes/home').then(convert(queryClient)),				},				{					path: paths.about.path,					lazy: () =>						import('@/routes/about').then(convert(queryClient)),				},				{					path: paths.blog.path,					lazy: () =>						import('@/routes/blog').then(convert(queryClient)),				},				{					path: paths.sitting.path,					lazy: () =>						import('@/routes/house-sitting').then(							convert(queryClient),						),				},				{					path: paths.book.path,					lazy: () =>						import('@/routes/book').then(convert(queryClient)),				},			],		},		// {		// 	path: '*',		// 	lazy: () => import('@/routes/not-found').then(convert(queryClient)),		// },	]);export const AppRouter = () => {	const queryClient = useQueryClient();	const router = useMemo(() => createAppRouter(queryClient), [queryClient]);	return <RouterProvider router={router} />;};